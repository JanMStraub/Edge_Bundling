## Initial test
    # Setup parameter
        jsonFile = "/Users/jan/Documents/code/bachelor_thesis/code/data/5x5_test_graph.json" 
        N = 100
        K = 1000
    # profiler
        16872851 function calls (16872775 primitive calls) in 10.631 seconds


## Removed nodes
    # Setup parameter
        jsonFile = "/Users/jan/Documents/code/bachelor_thesis/code/data/5x5_test_graph.json" 
        N = 100
        K = 1000
    # profiler
        11464418 function calls (11464342 primitive calls) in 5.539 seconds


## Removes np.array conversion and implemented interation stop
    # Setup parameter
        jsonFile = "/Users/jan/Documents/code/bachelor_thesis/code/data/5x5_test_graph.json" 
        N = 100
        K = 1000
    # profiler
        6458587 function calls (6458522 primitive calls) in 3.316 seconds


## Implemented outer iteration bound
    # Setup parameter
        jsonFile = "/Users/jan/Documents/code/bachelor_thesis/code/data/5x5_test_graph.json" 
        K = 1000
    # profiler
        972898 function calls (972833 primitive calls) in 0.538 seconds


## Implemented inner iteration bound
    # Setup parameter
        jsonFile = "/Users/jan/Documents/code/bachelor_thesis/code/data/5x5_test_graph.json" 
    # profiler
        806155 function calls (806090 primitive calls) in 0.430 seconds


## Got rid of unnecessary loop within the grid creation
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json"
        N = 15
        K = 625
    # profiler
        868038 function calls (867973 primitive calls) in 0.463 seconds

    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json"
        N = 30
        K = 10000
    # profiler
        14315303 function calls (14315238 primitive calls) in 18.843 seconds


## implemented faster grid creation
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json" 
        N = 15
        K = 625
    # profiler
        796360 function calls (796295 primitive calls) in 0.414 seconds
    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json" 
        N = 30
        K = 10000
    # profiler
        15231177 function calls (15231112 primitive calls) in 22.310 seconds


## node removal inside calculatePressure
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json" 
        N = 15
        K = 625
    # profiler
        886773 function calls (886708 primitive calls) in 0.382 seconds
    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json" 
        N = 30
        K = 10000
    # profiler
        17371961 function calls (17371896 primitive calls) in 13.991 seconds

## implemented continues plot
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json" 
        N = 15
        K = 625
    # profiler
        937502 function calls (937437 primitive calls) in 0.383 seconds
    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json"
        N = 30
        K = 10000
    # profiler
        17167316 function calls (17167251 primitive calls) in 13.942 seconds
    # Setup parameter
        jsonFile = "code/data/50x50_test_graph.json"
        N = 1
        K = 6250000
    # profiler
        179223468 function calls (179223403 primitive calls) in 386.537 seconds


## refactor and calculation improvement
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json" 
        N = 15
        K = 625
    # profiler
        817402 function calls (817337 primitive calls) in 0.312 seconds
    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json"
        N = 30
        K = 1000
    # profiler
        12093059 function calls (12092994 primitive calls) in 10.019 seconds
    # Setup parameter
        jsonFile = "code/data/50x50_test_graph.json"
        N = 1
        K = 6250000
    # profiler
        15276774 function calls (15276709 primitive calls) in 132.253 seconds

## removed no longer needed node and edge objects
    # Setup parameter
        jsonFile = "code/data/5x5_test_graph.json" 
        N = 15
        K = 625
    # profiler
        858505 function calls (858436 primitive calls) in 0.320 seconds
    # Setup parameter
        jsonFile = "code/data/10x10_test_graph.json"
        N = 30
        K = 1000
    # profiler
        12075121 function calls (12075056 primitive calls) in 9.309 seconds
    # Setup parameter
        jsonFile = "code/data/50x50_test_graph.json"
        N = 1
        K = 6250000
    # profiler
        13016520 function calls (13016455 primitive calls) in 99.923 seconds



## Notes with 50x50 graph
    * 43402539   29.109    0.000   29.109    0.000 {method 'index' of 'list' objects}
    * 146352/146256    6.628    0.000  407.361    0.003 {built-in method numpy.core._multiarray_umath.implement_array_function}
    * 292041   87.412    0.000   87.412    0.000 {built-in method numpy.asarray}
    * 145651   26.505    0.000  468.923    0.003 simulation.py:90(calculatePressure)
    * 145651    0.143    0.000  407.630    0.003 simulation.py:81(solveLGS)
    * 145651  312.190    0.002  400.731    0.003 linalg.py:2157(lstsq)
    * 291304    0.146    0.000   87.597    0.000 linalg.py:111(_makearray)


## Optimization ideas
    * use numpy to iterate through list
    * goal max 8 min better 3-4 min
    * Remove random